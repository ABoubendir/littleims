// ========================================================================
// Copyright 2007-2008 NEXCOM Systems
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at 
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ========================================================================

package org.cipango.littleims.router;

import java.io.Serializable;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import javax.servlet.sip.Address;
import javax.servlet.sip.SipServletRequest;
import javax.servlet.sip.SipURI;
import javax.servlet.sip.URI;
import javax.servlet.sip.ar.SipApplicationRouter;
import javax.servlet.sip.ar.SipApplicationRouterInfo;
import javax.servlet.sip.ar.SipApplicationRoutingDirective;
import javax.servlet.sip.ar.SipApplicationRoutingRegion;
import javax.servlet.sip.ar.SipRouteModifier;
import javax.servlet.sip.ar.SipTargetedRequestInfo;

import org.apache.log4j.Logger;

public class ApplicationRouter implements SipApplicationRouter
{
	private final static Logger __log = Logger.getLogger(ApplicationRouter.class);
	
	private static final String SCSCF_APP_NAME = "org.cipango.littleims.scscf";
	private static final String PCSCF_APP_NAME = "org.cipango.littleims.pcscf";
	private static final String ICSCF_APP_NAME = "org.cipango.littleims.icscf";
	private boolean _scscfDeployed = false;
	private boolean _pcscfDeployed = false;
	private boolean _icscfDeployed = false;
	
	public void applicationDeployed(List<String> newlyDeployedApplicationNames)
	{
		Iterator<String> it = newlyDeployedApplicationNames.iterator();
		while (it.hasNext())
		{
			String name = (String) it.next();
			if (name.equals(SCSCF_APP_NAME))
				_scscfDeployed = true;
			else if (name.equals(PCSCF_APP_NAME))
				_pcscfDeployed = true;
			else if (name.equals(ICSCF_APP_NAME))
			_icscfDeployed = true;
		}
		if (!_pcscfDeployed)
			__log.info("No P-CSCF deployed");
		if (!_scscfDeployed)
			__log.info("No S-CSCF deployed");
		if (!_icscfDeployed)
			__log.info("No I-CSCF deployed");
	}

	public void applicationUndeployed(List<String> toRemove)
	{
		Iterator<String> it = toRemove.iterator();
		while (it.hasNext())
		{
			String name = (String) it.next();
			if (name.equals(SCSCF_APP_NAME))
				_scscfDeployed = false;
			else if (name.equals(PCSCF_APP_NAME))
				_pcscfDeployed = false;
			else if (name.equals(ICSCF_APP_NAME))
				_icscfDeployed = false;
				
		}
	}

	public void destroy()
	{
	}

	public SipApplicationRouterInfo getNextApplication(SipServletRequest initialRequest,
			SipApplicationRoutingRegion region, SipApplicationRoutingDirective directive, SipTargetedRequestInfo toto, Serializable stateInfo)
	{
		// Match only once for incoming request and never for request generated by littleIMS
		if (stateInfo != null || initialRequest.getInitialRemoteAddr() == null)
			return null;
		
		
					
		Address poppedRoute = initialRequest.getPoppedRoute();
		if (poppedRoute == null)
		{
			URI requestUri = initialRequest.getRequestURI();
			if (requestUri.isSipURI())
			{
				SipURI uri = (SipURI) requestUri;
				if ("scscf".equals(uri.getUser()))
				{
					if (_scscfDeployed)
						return newRouterInfo(SCSCF_APP_NAME);
					else
						__log.warn("Got a request-URI: " + uri + " but no S-CSCF deployed");
				}
			}
			if (_pcscfDeployed)
				return newRouterInfo(PCSCF_APP_NAME);
			if (_scscfDeployed)
				return newRouterInfo(SCSCF_APP_NAME);
			__log.warn("No popped route and no LittleIMS application deployed");
			return null;
		}
		String user = ((SipURI) poppedRoute.getURI()).getUser();
		if ("icscf".equals(user))
		{
			if (_icscfDeployed)
				return newRouterInfo(ICSCF_APP_NAME);
			
			__log.warn("Got a route: " + poppedRoute + " but no I-CSCF deployed");
			return null;
		}
		else if ("scscf".equals(user))
		{
			if (_scscfDeployed)
				return newRouterInfo(SCSCF_APP_NAME);
			
			__log.warn("Got a route: " + poppedRoute + " but no S-CSCF deployed");
			return null;
		}
		else if (_pcscfDeployed)
			return newRouterInfo(PCSCF_APP_NAME);
		else if (_scscfDeployed)
			return newRouterInfo(SCSCF_APP_NAME);
		
		__log.warn("No LittleIMS application deployed");
		return null;
	}
	
	private SipApplicationRouterInfo newRouterInfo(String appName)
	{
		return new SipApplicationRouterInfo(
				appName,
				SipApplicationRoutingRegion.NEUTRAL_REGION,
				"",
				null,
				SipRouteModifier.NO_ROUTE,
				appName); 
	}


	public void init() 
	{

	}

	public void init(Properties config)
	{
	}
}
